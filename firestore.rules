rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user authentication and roles.
    // These make the rules below cleaner and easier to understand.
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }
    
    function isManager() {
      return isAuthenticated() && getUserData().role in ['admin', 'manager'];
    }

    // Rules are organized by collection for clarity.

    // USERS: Only admins can manage the list of users and their roles.
    // Users can view their own profile information.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow list, write: if isAdmin();
    }
    
    // COMPANY PROFILE: Any authenticated user can read it, but only managers/admins can update it.
    match /company/main {
        allow read: if isAuthenticated();
        allow write: if isManager();
    }
    
    // ACTIVITY LOG: Write access is restricted to prevent tampering.
    match /activityLog/{logId} {
        allow read: if isAuthenticated();
        allow create: if isManager();
        allow update, delete: if isAdmin();
    }
    
    // PROJECTS & SUB-COLLECTIONS: Managers control top-level projects,
    // while any authenticated user (team member) can interact with sub-collections.
    match /projects/{projectId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isManager();

        match /tasks/{taskId} {
            allow read, write: if isAuthenticated();
        }
        
        match /documents/{docId} {
            allow read: if isAuthenticated();
            allow create, delete: if isAuthenticated();
        }
        
        match /dailyLogs/{logId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated();
            allow update, delete: if isManager();
        }
    }
    
    // EMPLOYEES: Managed by HR/Managers.
    match /employees/{employeeId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isManager();
    }
    
    // CLIENTS & SUB-COLLECTIONS: Managed by sales/managers.
    match /clients/{clientId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isManager();

        match /interactions/{interactionId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated();
            allow update, delete: if isManager();
        }
        
        match /contracts/{contractId} {
            allow read: if isAuthenticated();
            allow create, delete: if isManager();
        }
    }
    
    // SUPPLIERS & SUB-COLLECTIONS: Managed by procurement/managers.
    match /suppliers/{supplierId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isManager();

        match /contracts/{contractId} {
            allow read: if isAuthenticated();
            allow create, delete: if isManager();
        }
    }
    
    // INVENTORY, CATEGORIES, WAREHOUSES: Inventory is managed by managers,
    // but the system configuration (categories, warehouses) is admin-only.
    match /inventory/{itemId} {
        allow read: if isAuthenticated();
        allow write: if isManager();
    }
    match /inventoryCategories/{categoryId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    match /warehouses/{warehouseId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // ASSETS: Managed by managers.
    match /assets/{assetId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isManager();
        
        match /maintenanceLogs/{logId} {
            allow read: if isAuthenticated();
            allow create: if isManager();
            allow update, delete: if isAdmin();
        }
    }
    
    // PROCUREMENT & MATERIAL REQUESTS: Any user can create requests, but managers approve them.
    match /procurement/{requestId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isManager();
    }
    match /materialRequests/{requestId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isManager();
    }
    
    // FINANCIALS (Transactions, Invoices, Accounts): Handled by the finance team/managers.
    match /transactions/{transactionId} {
        allow read: if isAuthenticated();
        allow write: if isManager();
    }
     match /invoices/{invoiceId} {
        allow read: if isAuthenticated();
        allow write: if isManager();
    }
    match /accounts/{accountId} {
        allow read: if isAuthenticated();
        allow write: if isManager();
    }

    // COLLECTION GROUP QUERIES: This is needed for features that query across all sub-collections.
    match /{path=**}/contracts/{contractId} {
        allow read: if isAuthenticated();
    }
  }
}
