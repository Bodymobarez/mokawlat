rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData() {
      // Gracefully handle cases where the user document might not exist yet.
      return getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && 'role' in getUserData() && getUserData().role in roles;
    }

    function isAdmin() {
      return isOneOfRoles(['admin']);
    }

    function isManager() {
      return isOneOfRoles(['admin', 'manager']);
    }

    // Default deny all to secure the database.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Top-level collections ---
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /clients/{clientId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /suppliers/{supplierId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /employees/{employeeId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /inventory/{itemId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /invoices/{invoiceId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    
    match /procurement/{procurementId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); 
      allow update, delete: if isManager();
    }

    match /materialRequests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isManager();
    }

    match /transactions/{transactionId} {
      allow read: if isManager(); 
      allow create, update, delete: if isManager();
    }
    
    match /assets/{assetId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }

    match /activityLog/{logId} {
      allow read: if isManager();
    }
    
    // --- Sub-collections ---
    match /projects/{projectId}/tasks/{taskId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    match /projects/{projectId}/documents/{documentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow delete: if isManager();
    }
    match /projects/{projectId}/dailyLogs/{logId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }

    match /clients/{clientId}/interactions/{interactionId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }
    match /clients/{clientId}/contracts/{contractId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManager();
    }

    match /suppliers/{supplierId}/contracts/{contractId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isManager();
    }
    
    match /assets/{assetId}/maintenanceLogs/{logId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isManager();
    }

    // --- Settings collections (Admin only) ---
    match /company/main {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /users/{userId} {
      allow read: if isManager();
      // Only admins can change roles. Users are created via auth trigger, not direct write.
      allow create: if false; 
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /warehouses/{warehouseId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /inventoryCategories/{categoryId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
  }
}
