
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /activityLog/{logId} {
      allow read, write: if request.auth != null; // Internal service writes
    }
    
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();

      match /materialRequests/{requestId} {
        allow read, write: if request.auth != null; // Allow project members to create, admins to update status
      }
    }
    
    match /employees/{employeeId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /clients/{clientId} {
      allow read, write: if request.auth != null; // Assuming all users can manage clients for now

      match /interactions/{interactionId} {
        allow read, write: if request.auth != null;
      }
    }

    match /suppliers/{supplierId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      
      match /contracts/{contractId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
      }
    }
    
    match /inventory/{itemId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /procurement/{procurementId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /materialRequests/{requestId} {
       allow read, write: if request.auth != null; 
    }
  }
}
