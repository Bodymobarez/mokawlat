rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check the user's role from their document in the 'users' collection.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Secure the users collection.
    match /users/{userId} {
      // Admins can read all user profiles. Users can only read their own.
      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());
      // Users can create their own profile on signup.
      allow create: if isAuth() && request.auth.uid == userId;
      // Admins can update anyone's role. Users can update their own profile, but NOT their role.
      allow update: if (isAuth() && request.auth.uid == userId && !("role" in request.resource.data)) || (isAdmin());
    }

    // Default: Authenticated users can read anything.
    // This allows all pages to load data for any user role.
    // Write access is handled on a per-collection basis below.
    match /{path=**} {
        allow read: if isAuth();
        allow write: if false; // Deny writes by default.
    }

    // Admins have full write access to all business data collections.
    // Non-admins have already been granted read access by the rule above.
    match /clients/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    match /employees/{docId}/{**=**} {
      allow write: if isAdmin();
    }
     match /transactions/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    match /inventory/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    match /procurement/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    match /projects/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    match /suppliers/{docId}/{**=**} {
      allow write: if isAdmin();
    }
    
    // Log entries can be created by authenticated users (via server actions).
    match /activityLog/{logId} {
      allow create: if isAuth();
    }

    // Material requests can be created by authenticated users.
    // They can only be updated (approved/rejected) by an admin.
    match /materialRequests/{requestId} {
      allow create: if isAuth();
      allow update: if isAdmin();
    }
  }
}
