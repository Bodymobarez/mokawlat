
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions to check auth status and roles
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    function getRole() {
      // Safely access role data, returning 'user' if the document doesn't exist yet.
      return getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isRole(role) {
        return isAuthenticated() && getRole() == role;
    }

    function isAdmin() {
      return isRole('admin');
    }

    function isManager() {
      return isRole('manager');
    }
    
    // --- System Wide Collections ---
    
    // Users can only read/update their own user doc. Only admins can create/delete.
    match /users/{userId} {
      allow read, update: if isUser(userId) || isAdmin();
      allow create, delete: if isAdmin();
    }
    
    match /company/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /activityLog/{logId} {
        allow read: if isAuthenticated();
        allow write: if false; // Only backend/server actions can write
    }

    match /inventoryCategories/{categoryId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /warehouses/{warehouseId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // --- Core Data Collections ---
    
    // General rule: Any authenticated user can read, only managers/admins can write.
    match /{collection}/{docId} 
    where collection in [
        'projects', 'clients', 'suppliers', 'employees', 'inventory', 
        'assets', 'procurement', 'materialRequests', 'invoices', 'accounts', 'transactions'
    ] {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isManager();
    }
    
    // --- HR Module Collections ---
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isManager();
    }
    
    match /candidates/{candidateId} {
      allow read, write: if isAdmin() || isManager();
    }

    match /performanceReviews/{reviewId} {
      allow read, write: if isAdmin() || isManager();
    }
    
    match /trainings/{trainingId} {
       allow read, write: if isAdmin() || isManager();
    }
    
    match /offboarding/{offboardingId} {
       allow read, write: if isAdmin() || isManager();
    }

    // --- Sub-Collections ---
    match /projects/{projectId}/{subCollection}/{docId} 
    where subCollection in ['tasks', 'documents', 'dailyLogs'] {
        // A more complex app might check if user is in project.teamMemberIds
        allow read: if isAuthenticated(); 
        allow write: if isAdmin() || isManager(); 
    }
    
    // Rule for collection group query on 'contracts' used in financials
    match /{path=**}/contracts/{contractId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isManager();
    }
    
    match /clients/{clientId}/interactions/{interactionId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isManager();
    }
    
    match /suppliers/{supplierId}/contracts/{contractId} {
        // This is covered by the collection group rule, but explicit is fine
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isManager();
    }
    
    match /assets/{assetId}/maintenanceLogs/{logId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isManager();
    }
  }
}
