rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isAdmin() {
      // Checks if the requesting user has an 'admin' role in the /users collection in Firestore.
      return get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Default deny all access to files.
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Client Contracts: Authenticated users can read. Admins can write.
    match /contracts/clients/{clientId}/{contractId}/{fileName} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Supplier Contracts: Authenticated users can read. Admins can write.
    match /contracts/suppliers/{supplierId}/{contractId}/{fileName} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Project Documents: Authenticated users can read. Admins can write.
    match /projects/{projectId}/documents/{docId}/{fileName} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Daily Log Photos: Authenticated users can read and write.
    match /projects/{projectId}/dailyLogs/{logId}/{fileName} {
        allow read, write: if isAuthenticated();
    }
  }
}
